---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Typic.
--- DateTime: 2022-05-01 10:37 AM
---

local audio_clip = audio_clip(".\\src\\audio\\epic.mp3", true)

local raw_clip = raw_audio_clip(".\\src\\audio\\epic.mp3", true);

-- by default audio and raw_audio_clip are the same raw audio clip just distinguish
-- that the clip is not ambisonic and allow to use filters (low_pass, reverb, ..)

assert(audio_clip.channel == raw_clip.channel, "native audio clip and raw audio clip channel should be the same")

assert(audio_clip.samples == raw_clip.samples, "native audio clip and raw audio clip samples should be the same")

assert(audio_clip.sample_rate == raw_clip.sample_rate, "native audio clip and raw audio clip should be the same")

assert(audio_clip.frame_length == raw_clip.frame_length, "native audio clip and raw audio clip frame length should be the same")

assert(audio_clip.duration["seconds"] == raw_clip.duration["seconds"], "native audio clip and raw audio clip duration (seconds) should be the same")

assert(audio_clip.duration["milliseconds"] == raw_clip.duration["milliseconds"], "native audio clip and raw audio clip duration (milliseconds) should be the same")

assert(audio_clip.duration["microseconds"] == raw_clip.duration["microseconds"], "native audio clip and raw audio clip duration (microseconds) should be the same")

print("Is ambisonic ", raw_clip:is_ambisonic())

-- When we apply filters we need to reassign it because the raw audio clip is moved for all filter types.

-- parameter u32 Frequency
-- (low_pass)
local low_pass_clip = raw_clip:low_pass(10)

-- (low_pass -> buffered)
local buffered_clip = low_pass_clip:buffered()

-- parameter u64, u32 (Seconds, Microseconds)
-- (low_pass -> buffered -> fade_in)
local fade_in_clip = buffered_clip:fade_in(2, 2300)

-- parameter u64, u32, f32 (Seconds, Microseconds, Amplitude)
-- (low_pass -> buffered -> fade_in -> reverb)
local reverb_clip = fade_in_clip:reverb(1, 1000, 2.0)

-- (low_pass -> buffered -> fade_in -> reverb -> loop)
local loopable_clip = fade_in_clip:loop()

-- parameter f32 (factor)
-- (low_pass -> buffered -> fade_in -> reverb -> loop -> speed)
local speed_clip = loopable_clip:speed(1.5)

-- Or we can chain

local raw_clip_2 = raw_audio_clip(".\\src\\audio\\epic.mp3", true);

local chained_clip = raw_clip_2:loop():reverb(1, 2500, 1.5)