#[rustfmt::skip]
const S_RGB_TO_XYZ: [f32; 9] = [
    0.41238656, 0.21263682, 0.01933062,
    0.35759149, 0.71518298, 0.11919716,
    0.18045049, 0.0721802, 0.95037259
];

#[rustfmt::skip]
const XYZ_TO_S_RGB: [f32; 9] = [
    3.24100326, -0.96922426, 0.05563942,
    -1.53739899, 1.87592999, -0.2040112,
    -0.49861587, 0.04155422, 1.05714897 
];


#[rustfmt::skip]
const REC_2020_TO_XYZ : [f32; 9] = [
	0.636953507, 0.262698339, 4.99407097e-17,
    0.144619185, 0.678008766, 0.0280731358,
    0.168855854, 0.0592928953, 1.06082723,
];


#[rustfmt::skip]
const XYZ_TO_REC_2020 : [f32; 9] = [
    1.71666343, -0.66667384, 0.01764248,
    -0.35567332, 1.61645574, -0.04277698,
    -0.25336809, 0.0157683, 0.94224328
];


#[rustfmt::skip]
const XYZ_TO_CIECAT16 : [f32; 9] = [
    0.401288, -0.250268, -0.002079,
    0.650173, 1.204414, 0.048952,
    -0.051461, 0.045854, 0.953127,
];

#[rustfmt::skip]
const CIECAT16_TO_XYZ : [f32; 9] = [
    1.8620678551, 0.3875265432, -0.0158414988,
    -1.0112546305, 0.6214474419, -0.0341229380,
    0.1491867754, -0.0089739852, 1.0499644369,
];


#[rustfmt::skip]
const DCI_P3_TO_XYZ : [f32; 9] = [
	4.45169816e-01, 2.09491678e-01, -3.63410132e-17,
    2.77134409e-01, 7.21595254e-01, 4.70605601e-02,
    1.72282670e-01, 6.89130679e-02, 9.07355394e-01
];

#[rustfmt::skip]
const XYZ_TO_DCI_P3: [f32; 9] = [
    2.72539403, -0.79516803, 0.04124189,
    -1.01800301, 1.68973205, -0.08763902,
    -0.4401632, 0.02264719, 1.10092938
];


#[rustfmt::skip]
const XYZ_TO_OKLAB_LMS: [f32; 9] = [
    0.8189330101, 0.3618667424, -0.1288597137,
    0.0329845436, 0.9293118715, 0.0361456387,
    0.0482003018, 0.2643662691, 0.6338517070
];

#[rustfmt::skip]
const OKLAB_LMS_TO_XYZ : [f32; 9] = [
    1.2270138511, -0.5577999806, 0.2812561489,
    -0.0405801784, 1.1122568696, -0.0716766786,
    -0.0763812845, -0.4214819784, 1.5861632204,
];

#[rustfmt::skip]
const LINEAR_S_RGB_TO_OKLAB_LMS : [f32; 9] = [
    0.4122214708, 0.2119034982, 0.0883024619,
    0.5363325363, 0.6806995451, 0.2817188376,
    0.0514459929, 0.1073969566, 0.6299787005
];


#[rustfmt::skip]
const OKLAB_LMS_TO_LINEAR_S_RGB: [f32; 9] = [
    4.0767416621, -1.2684380046, -0.0041960863,
    -3.3077115913, 2.6097574011, -0.7034186147,
    0.2309699292, -0.3413193965, 1.7076147010
];


#[rustfmt::skip]
const OKLAB_LMS_TO_OKLAB: [f32; 9] = [
    0.2104542553, 1.9779984951, 0.0259040371,
    0.7936177850, -2.4285922050, 0.7827717662,
    -0.0040720468, 0.4505937099, -0.8086757660,
];


#[rustfmt::skip]
const OKLAB_OKLAB_LMS : [f32; 9] = [
    1.0000000000, 1.0000000000, 1.0000000000,
    0.3963377774, -0.1055613458, -0.0894841775,
    0.2158037573, -0.0638541728, -1.2914855480
];

#[rustfmt::skip]
const S_RGB_TO_REC_2020 : [f32; 9] = [
    0.4727156289, -0.1104944931, -0.0295145305,
    0.4236367927, 1.0773447385, 0.1451474784,
    0.0711812764, 0.0254131432, 0.8924639073,
];

#[rustfmt::skip]
const REC_2020_TO_S_RGB: [f32; 9] = [
    1.9335950111, 0.1975626582, 0.0318146486,
    -0.7424046947, 0.8559284014, -0.1637573971,
    -0.1330797986, -0.0401300163, 1.1226189818,
];


#[rustfmt::skip]
const S_RGB_TO_CIECAT16: [f32; 9] = [
    0.0756169143, -0.0938088725, -0.0240499136,
    0.7076442161, 1.0031604780, 0.2026536145,
    0.1671674096, 0.0906483945, 0.9102966691,
];


#[rustfmt::skip]
const CIECAT16_TO_SRGB : [f32; 9] = [
    7.0234011713, 0.6531535489, 0.0401498382,
    -4.7902198963, 0.5718397723, -0.2538620422,
    -0.8127658408, -0.1768899629, 1.1164496988,
];


#[rustfmt::skip]
const CIECAT16_REC2020 : [f32; 9] = [
    3.8733528235, 0.2507915691, 0.0140783250,
    -2.3033179679, 0.8670933123, -0.0944381282,
    -0.3471641057, -0.0968433676, 0.9927976044
];

#[rustfmt::skip]
const REC2020_TO_CIECAT16 : [f32; 9] = [
    0.2190571932, -0.0643894762, -0.0092312672,
    0.5965771753, 0.9903051239, 0.0857412976,
    0.1347941783, 0.0740843530, 1.0123903471
];

// rec2020 to oaklab_lms


pub fn xyz_to_xy_y(xyz: [f32; 3]) -> [f32; 3] {
    let [x, y, z] = xyz;

    let chromatic_denominator: f32 = 1.0 / (x + y + z).max(0.00001);

    let cie_2d = [x * chromatic_denominator, y * chromatic_denominator, y];

    cie_2d
}

/// Return the same nominal range as input Y
pub fn xy_y_to_xyz(xy_y: [f32; 3]) -> [f32; 3] {
    let rcp_y = xy_y[2] / xy_y[1].max(0.00001);


    return [rcp_y * xy_y[0], xy_y[2], rcp_y * (1.0 - xy_y[0] - xy_y[1])];
}


#[cfg(test)]
mod space_conversion_test {
    use crate::color::{xy_y_to_xyz, xyz_to_xy_y};

    #[test]
    fn xyz_xyy_test() {
        let xy_y = [0.642, 0.327, 22.62];

        let xyz = xy_y_to_xyz(xy_y);

        let result_xy_y = xyz_to_xy_y(xyz);

        assert!(xy_y[0].eq(&result_xy_y[0]));
        assert!(xy_y[1].eq(&result_xy_y[1]));
        assert!(xy_y[2].eq(&result_xy_y[2]));
    }
}
