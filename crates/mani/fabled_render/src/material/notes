Since only struct can have a [[group(0), binding(0)]] var<uniform> type what i will do is to disassemble the vairables
in the struct and put them in the correct Material Node type. The mtrl file will contain all the variable type in the structure.
if the do this then i will need some sort of identifier for the type or for which struct they belong to since more
complex shader can have multiple struct types.

One the end user changes the variables in the struct. The disassemble variables should be assembled in the same correct
struct type and should be passed to the shader.

Variables in the shader that should not be disassemble will be and which is required for every shader are.
The Vertex Position.
The Normal Position.
The Tangent Position.
The Bi-Tangent Position.
The UV Coordinates.

You can update variables to update the immutable types above


Since we can't create a anonymous struct in rust for the variable type retrieved from the material parser we
will not be using bytemuck crate for dealing with creating buffer or creating bindingGroups.
instead will pack each variable type to the same sort of type.
This means we must create some sort of container and pack all the variable type to the container type.
The container must be full before packing the remaining variables to a new container. Or we can also explicitly
specify the alignment of the variable in the shader though it will be cumbersome for developer that are just
starting with shader development or even a experience graphics programmer.